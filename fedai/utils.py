"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_utils.ipynb.ipynb.

# %% auto 0
__all__ = ['get_class', 'load_ds', 'get_server', 'load_config', 'get_client_indices_rounds', 'LazyList']

# %% ../nbs/05_utils.ipynb.ipynb 3
from fastcore.utils import *
import numpy as np
import yaml
from .data import *
import numpy as np

# %% ../nbs/05_utils.ipynb.ipynb 4
import importlib
def get_class(module_name, class_name):
    module = importlib.import_module(module_name)
    return getattr(module, class_name)

# %% ../nbs/05_utils.ipynb.ipynb 5
def load_ds(cfg, get_datasets):
    print("Generating the datasets...")
    loss_ds, gener_ds = get_datasets(cfg)
    print("Datasets generated successfully.")
    return loss_ds, gener_ds

# %% ../nbs/05_utils.ipynb.ipynb 6
def get_server(cfg, lst_data_dict, model, holdout_ds, **kwargs):
    Server = get_class('fedai.servers', f'Server_{cfg.name}')
    return Server(cfg, lst_data_dict, model, holdout_ds, **kwargs)

# %% ../nbs/05_utils.ipynb.ipynb 7
def load_config(file_path):
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

# %% ../nbs/05_utils.ipynb.ipynb 8
def get_client_indices_rounds(args):
    client_indices_rounds = []
    for _ in range(args.rounds):
        client_indices_rounds.append(np.random.choice(np.arange(args.num_clients), size=int(args.num_clients * args.m), replace=False))
    return client_indices_rounds

# %% ../nbs/05_utils.ipynb.ipynb 10
class LazyList:
    def __init__(self, server, client_cls):
        self.server = server
        self.client_cls = client_cls
        self.client_cache = {}  # Cache to store initialized clients

    def clear_cache(self):
        # Clear the cache to free memory if needed
        self.client_cache = {}


# %% ../nbs/05_utils.ipynb.ipynb 11
@patch
def __getitem__(self: LazyList, idx):
    # Check if the client is already instantiated
    if idx not in self.client_cache:
        # Instantiate the client and store it in the cache
        self.client_cache[idx] = self.client_cls(
            data_dict= self.server.lst_data_dict[idx],
            model= None, #deepcopy(self.server.model),
            criterion= self.server.criterion,
            optimizer= None, #get_class('torch.optim', self.server.cfg.optimizer)(self.server.model.parameters(), lr= self.server.cfg.lr),
            idx= idx,
            gen_data_dict= self.server.lst_gen_data_dict[idx],
            tokenizer= self.server.tokenizer,
            collat_fn= self.server.collat_fn,
            cfg= self.server.cfg
        )
    return self.client_cache[idx]
