# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_metrics.ipynb.

# %% auto 0
__all__ = ['get_cls', 'Metrics']

# %% ../nbs/09_metrics.ipynb 2
import numpy as np
import torch
from rouge import Rouge
import evaluate
from fastcore.utils import *


# %% ../nbs/09_metrics.ipynb 3
import importlib
def get_cls(module_name, class_name):
    module = importlib.import_module(module_name)
    return getattr(module, class_name)

# %% ../nbs/09_metrics.ipynb 5
class Metrics:
    def __init__(self, lst_metrics_names):
        self.lst_metrics_names = lst_metrics_names
        self.metrics = {metric_name: 0 for metric_name in lst_metrics_names}

# %% ../nbs/09_metrics.ipynb 6
@patch
def prepare_sequence(self: Metrics, y_true):
    if isinstance(y_true, torch.Tensor):
        y_true = y_true.detach().cpu().numpy()
    elif isinstance(y_true, list):
        y_true = np.array(y_true)
    
    return y_true

# %% ../nbs/09_metrics.ipynb 7
@patch
def compute(self: Metrics, y_true, y_pred):
    y_true = self.prepare_sequence(y_true)
    y_pred = self.prepare_sequence(y_pred)

    for metric_name in self.lst_metrics_names:
        metric = get_cls('sklearn.metrics', metric_name)
        self.metrics[metric_name] = metric(y_true, y_pred)
    return self.metrics
