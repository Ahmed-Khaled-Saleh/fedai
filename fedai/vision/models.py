"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/07_vision.models.ipynb.

# %% auto 0
__all__ = ['MNISTCNN', 'CIFAR10CNN', 'CIFAR10Encoder', 'CIFAR10ClassificationHead', 'CIFAR10Model']

# %% ../../nbs/07_vision.models.ipynb 3
from fastcore.utils import *  # noqa: F403
from torch import nn
from peft import *  # noqa: F403

# %% ../../nbs/07_vision.models.ipynb 4
class MNISTCNN(nn.Module):
    def __init__(self, num_classes=10):
        super(MNISTCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=5, stride=1, padding=2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(64 * 7 * 7, 512)
        self.fc2 = nn.Linear(512, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.conv1(x))
        x = self.pool(x)
        x = self.relu(self.conv2(x))
        x = self.pool(x)
        x = x.view(x.size(0), -1)  # Flatten
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x



# %% ../../nbs/07_vision.models.ipynb 5
class CIFAR10CNN(nn.Module):
    
    def __init__(self, num_classes=10):
        super(CIFAR10CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(128 * 4 * 4, 512)
        self.fc2 = nn.Linear(512, num_classes)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = self.pool(self.relu(self.conv3(x)))
        x = x.view(x.size(0), -1)  # Flatten
        x = self.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.fc2(x)
        return x


# %% ../../nbs/07_vision.models.ipynb 6
import torch
import torch.nn as nn
import numpy as np
import random

torch.manual_seed(42)  
np.random.seed(42)
random.seed(42)

# Encoder Model
class CIFAR10Encoder(nn.Module):
    def __init__(self):
        super(CIFAR10Encoder, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        
        self.fc1 = nn.Linear(128 * 4 * 4, 512)

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = self.pool(self.relu(self.conv3(x)))
        x = x.view(x.size(0), -1)  # Flatten
        x = self.relu(self.fc1(x))
        return x

# Classification Head Model
class CIFAR10ClassificationHead(nn.Module):
    def __init__(self, num_classes=10):
        super(CIFAR10ClassificationHead, self).__init__()
        self.fc2 = nn.Linear(512, num_classes)
        self.dropout = nn.Dropout(0.5) 

    def forward(self, x):
        x = self.dropout(x)
        x = self.fc2(x)
        return x

class CIFAR10Model(nn.Module):
    def __init__(self, num_classes=10):
        super(CIFAR10Model, self).__init__()
        self.encoder = CIFAR10Encoder()
        self.classifier = CIFAR10ClassificationHead(num_classes)

    def forward(self, x):
        x = self.encoder(x)
        x = self.classifier(x)
        return x

