"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_data.tensorf.ipynb.

# %% auto 0
__all__ = ['TensorF']

# %% ../../nbs/04_data.tensorf.ipynb 3
import numpy as np
import os
import sys
import random
import torch
import torchvision
from sklearn.model_selection import train_test_split
import ujson
import torchvision.transforms as transforms
from fastcore.utils import *
from ..utils import *

# %% ../../nbs/04_data.tensorf.ipynb 4
random.seed(42)
np.random.seed(42)
torch.manual_seed(42)

# %% ../../nbs/04_data.tensorf.ipynb 5
class TensorF(torch.utils.data.Dataset):
    def __init__(self, cfg, client_idx, train= True):
        self.cfg = cfg
        self.config_path = self.cfg.data.dir_path + "config.json"
        self.train_path = self.cfg.data.dir_path + "train/"
        self.test_path = self.cfg.data.dir_path + "test/"
        self.train = train
        self.data_dict = self.load_single_client_data(client_idx)

    def tensorify(self, data):
        X = torch.Tensor(data['x']).type(torch.float32)
        y = torch.Tensor(data['y']).type(torch.int64)
        return {'x': X, 'y': y}

    def load_single_client_data(self, idx):
        data_dir = os.path.join(self.train_path) if self.train else os.path.join(self.test_path)

        data_file = os.path.join(data_dir, str(idx) + '.npz')
        with open(data_file, 'rb') as f:
            data = np.load(f, allow_pickle= True)['data'].tolist()
        
        data_dict = self.tensorify(data)

        return data_dict

    def __getitem__(self, index):
        return self.data_dict['x'][index], self.data_dict['y'][index]

    def __len__(self):
        return len(self.data_dict['x'])
