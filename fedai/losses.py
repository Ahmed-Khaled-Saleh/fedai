"""ِAny custom losses should be here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/11_losses.ipynb.

# %% auto 0
__all__ = ['AnchorLoss']

# %% ../nbs/11_losses.ipynb 3
import copy
import numpy as np
import torch, os, random
import torch.nn as nn
import torch.nn.functional as F
from fastcore.utils import * # type: ignore # noqa: F403


# %% ../nbs/11_losses.ipynb 4
class AnchorLoss(nn.Module):
    def __init__(self, num_classes, feature_num, ablation=0):
        super().__init__()
        self.num_classes = num_classes
        self.feature_num = feature_num

        # initiate anchors
        if num_classes > feature_num:
            self.anchor = nn.Parameter(F.normalize(torch.randn(num_classes, feature_num)), requires_grad=True)
        elif ablation==1:
            self.anchor = nn.Parameter(F.normalize(torch.randn(num_classes, feature_num)), requires_grad=True)
        elif ablation==2:
            self.anchor = nn.Parameter(F.normalize(torch.randn(num_classes, feature_num)), requires_grad=True)
            self.anchor.data = torch.load('utils/converged_anchors_data.pt')
        else:
            I = torch.eye(feature_num,feature_num)
            index = torch.LongTensor(random.sample(range(feature_num), num_classes))
            init = torch.index_select(I, 0, index)
            self.anchor = nn.Parameter(init, requires_grad=True)

    

# %% ../nbs/11_losses.ipynb 5
@patch
def forward(self: AnchorLoss, feature, _target, Lambda = 0.1):
    # broadcast feature anchors for all inputs
    centre = self.anchor.cuda().index_select(dim=0, index=_target.long())
    # compute the number of samples in each class
    counter = torch.histc(_target, bins=self.num_classes, min=0, max=self.num_classes-1)
    count = counter[_target.long()]
    centre_dis = feature - centre				# compute distance between input and anchors
    pow_ = torch.pow(centre_dis, 2)				# squre
    sum_1 = torch.sum(pow_, dim=1)				# sum all distance
    dis_ = torch.div(sum_1, count.float())		# mean by class
    sum_2 = torch.sum(dis_)/self.num_classes						# mean loss
    res = Lambda*sum_2   							# time hyperparameter lambda 
    return res
